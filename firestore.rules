rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Books collection - any authenticated user can read, but write needs validation
    match /books/{bookId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() 
        && request.resource.data.keys().hasAll(['id', 'title', 'author', 'totalPages'])
        && request.resource.data.id == bookId;
    }

    // UserBooks collection - more specific rules
    match /userBooks/{userBookId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && userBookId == request.resource.data.userId + '_' + request.resource.data.bookId;
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid
        && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
    }

    // Users collection - basic rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Rules for booklist collection
    match /booklist/{document=**} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
    }

    // Rules for custom-books collection
    match /custom-books/{document=**} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.resource.data.addedBy == request.auth.uid;
      allow update: if isAuthenticated() 
        && resource.data.addedBy == request.auth.uid;
      allow delete: if isAuthenticated() 
        && resource.data.addedBy == request.auth.uid;
    }

    // Rules for posts collection
    match /posts/{document=**} {
      allow read, write: if isAuthenticated();
    }

    // Rules for pending-books collection
    match /pending-books/{document=**} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() 
        && (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Add these rules for the notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow write: if isAuthenticated();
    }

    // Update the followers rules
    match /followers/{followId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Admin function
    function isAdmin() {
      return request.auth.uid in ['KnyjSMErQ5SQBIkreNblM9tG7Dk1'];
    }
  }
}